scalar PublicKey # string
scalar PrivateKey # string
scalar SeedPhrase # string
scalar Address # string

enum SeedDictionaryLang {
  ENGLISH # default value
  JAPANESE
  SPANISH
  CHINESE_SIMPLE
  CHINESE_TRADITIONAL
  FRENCH
  ITALIAN
  KOREAN
  CZECH
}

input StoreInput {
  storeId: ID!
  password: String
}

input GenerateSeedPhraseInput {
  uuid: String!
  blockchain: BlockchainInput!
  wordCount: Int!
  lang: SeedDictionaryLang
  password: String
}

input GetDataFromSeedInput {
  uuid: String!
  store: StoreInput
  blockchain: BlockchainInput!
  seedPhrase: SeedPhrase!
}

type SeedWithKeys {
  seedPhrase: SeedPhrase!
  seed: String!
  masterPublicKey: PublicKey!
  masterPrivateKey: PrivateKey!
}

input PathCursorInput {
  path: String! # m/44'/0'/0'/0
  limit: Int!
  skip: Int!
}

input FromInput {
  masterPrivateKey: PrivateKey
  masterPublicKey: PublicKey
  seedPhrase: String
}

input DerivateKeysInput {
  uuid: String!
  blockchain: BlockchainInput!
  from: FromInput!
  pathCursor: PathCursorInput!
}

input DerivateKeysFromStoreInput {
  uuid: String!
  store: StoreInput!
  blockchain: BlockchainInput!
  pathCursor: PathCursorInput!
}

type KeysWithPath {
  path: String!
  address: Address!
  publicKey: PublicKey!
  privateKey: PrivateKey
}

type PublicKeyWithPath {
  path: String!
  address: Address!
  publicKey: PublicKey!
}

input SignInput {
  uuid: String!
  blockchain: BlockchainInput!
  data: String!
  privateKey: PrivateKey!
}

input SignFromStoreInput {
  uuid: String!
  store: StoreInput!
  path: String!
  data: String!
}

input GetPublicFromPrivateInput {
  uuid: String!
  blockchain: BlockchainInput!
  privateKey: PrivateKey!
}

input GetAddressFromPublicInput {
  uuid: String!
  blockchain: BlockchainInput!
  publicKey: PublicKey!
}

input CheckSignInput {
  publicKey: PublicKey!
  data: String!
  sign: String!
}

enum StoreType {
  SEED
  KEYS
}

type Store {
  id: ID!
  blockchain: [BlockchainID]!
  type: StoreType!
  isEncrypted: Boolean!
}

input ExportPrivateKeysInput {
  uuid: String!
  storeId: ID!
  password: String
}

input ExportSeedInput {
  uuid: String!
  storeId: ID!
  password: String
}

input ImportSeedInput {
  uuid: String!
  blockchain: BlockchainInput!
  seedPhrase: SeedPhrase!
  password: String
}

input ImportKeysInput {
  uuid: String!
  blockchain: BlockchainInput!
  privateKeys: [PrivateKey]
  publicKeys: [PublicKey]
}

input GetPublicDataInput {
  uuid: String!
  storeId: ID!
  blockchain: BlockchainInput!
  pathCursor: PathCursorInput!
}

type Path {
  blockchainId: BlockchainID
  path: String
}

extend type Query {
  getStores: [Store]!
  getPublicData(input: GetPublicDataInput!): [PublicKeyWithPath]!
}

extend type Mutation {
  importKeys(input: ImportKeysInput!): Store!
  importSeed(input: ImportSeedInput!): Store!
  generateSeedPhraseToStore(input: GenerateSeedPhraseInput!): Store!
  exportSeed(input: ExportSeedInput!): SeedPhrase!
  exportSeedWithKeys(input: ExportSeedInput!): SeedWithKeys!
  exportPrivateKeys(input: ExportPrivateKeysInput!): [PrivateKey]!
  derivateKeysFromStore(input: DerivateKeysInput!): [KeysWithPath]!
  signFromStore(input: SignInput!): String!
  # keys lib proxy
  generateSeedPhrase(input: GenerateSeedPhraseInput!): SeedWithKeys!
  getDataFromSeed(input: GetDataFromSeedInput!): SeedWithKeys!
  derivateKeys(input: DerivateKeysInput!): [KeysWithPath]!
  sign(input: SignInput!): String!
  getPublicFromPrivate(input: GetPublicFromPrivateInput!): PublicKey!
  getAddressFromPublic(input: GetAddressFromPublicInput!, format: String): Address!
  checkSign(input: CheckSignInput!): Boolean!
  getDefaultPaths: [Path]!
}
